/* eslint-disable no-throw-literal */

module.exports = {
  /**
   * @swagger
   *
   * /update-password-and-login:
   *   security:
   *     - bearer: []
   *   tags:
   *     - Entrance
   */

  friendlyName: 'Update password and login',

  description:
    'Finish the password recovery flow by setting the new password and ' +
    'logging in the requesting user, based on the authenticity of their token.',

  inputs: {
    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      required: true,
    },

    token: {
      description:
        'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      required: true,
    },
  },

  exits: {
    success: {
      description:
        'Password successfully updated, and requesting user agent is now logged in.',
    },

    invalidToken: {
      description:
        'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired',
    },
  },

  fn: async function({password, token}) {
    if (!token) {
      throw 'invalidToken';
    }

    // Look up the user with this reset token.
    const userRecord = await User.findOne({where: {passwordResetToken: token}});

    // If no such user exists, or their token is expired, bail.
    if (!userRecord || userRecord.passwordResetTokenExpiresAt <= Date.now()) {
      throw 'invalidToken';
    }

    // Store the user's new password and clear their reset token so it can't be used again.
    await userRecord.update({
      password,
      passwordResetToken: '',
      passwordResetTokenExpiresAt: 0,
    });

    // Log the user in.
    // (This will be persisted when the response is sent.)
    this.req.session.userId = userRecord.id;

    // In case there was an existing session, broadcast a message that we can
    // display in other open tabs.
    if (sails.hooks.sockets) {
      await sails.helpers.broadcastSessionChange(this.req);
    }
  },
};
