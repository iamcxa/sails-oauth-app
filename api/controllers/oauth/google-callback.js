var passport = require('passport');

module.exports = {


  friendlyName: 'facebook oAuth API callbcak handler',


  description: 'oAuth',


  inputs: {

    // password: {
    //   description: 'The new, unencrypted password.',
    //   example: 'abc123v2',
    //   required: true
    // },
    //
    // token: {
    //   description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
    //   example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
    //   required: true
    // }

  },


  exits: {

    success: {
      viewTemplatePath: 'pages/dashboard/welcome',
      description: 'Display the welcome page for authenticated users.'
    },

    invalidToken: {
      description: 'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired'
    }

  },


  fn: async function (inputs, exits, env) {

    const { req, res, next } = env;

    passport.authenticate('google', async (err, user) => {
      if(err) {
        // redirect to login page
        console.log('google callback error: '+err);

        return res.redirect('/signup');
      } else {
        // console.log('google credentials');
        // console.log(user);

        const newUser = await sails.helpers.userSignup(user, req.ip);

        // Modify the active session instance.
        // (This will be persisted when the response is sent.)
        this.req.session.userId = newUser.id;

        // In case there was an existing session (e.g. if we allow users to go to the login page
        // when they're already logged in), broadcast a message that we can display in other open tabs.
        if (sails.hooks.sockets) {
          await sails.helpers.broadcastSessionChange(this.req);
        }

        // res.json(user);
        return res.redirect('/account/oauth-password');
      }
    })(req, res, next);

  }


};
